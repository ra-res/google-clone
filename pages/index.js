import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { ViewGridIcon } from "@heroicons/react/solid";
import { SearchIcon } from "@heroicons/react/outline";
import { useRef, useState } from "react";
import { useCookies } from "react-cookie";

import Avatar from "../components/Avatar";
import Footer from "../components/Footer";
import VoiceInput from "../components/VoiceInput";
import { parseCookies } from "../lib/ParseCookies";
import DarkModeSwitch from "../components/DarkModeSwitch";
export default function Home({ initialDarkMode = true }) {
  const searchInputRef = useRef(null);

  const [darkMode, setDarkMode] = useState(initialDarkMode);
  const [cookie, setCookie] = useCookies(["DarkMode"]);

  const setDarkModeAndCookie = () => {
    setDarkMode(!darkMode);
    setCookie("DarkMode", JSON.stringify(!darkMode), {
      maxAge: 3600,
      sameSite: true,
    });
  };

  const router = useRouter();

  const search = (e) => {
    e.preventDefault();
    const term = searchInputRef.current.value;

    if (!term) return;
    router.push(`/search?term=${term}`);
  };

  const feelingLucky = (e) => {
    e.preventDefault();
    let randomWords = require("random-words");
    const term = randomWords(1);

    if (!term) return;
    router.push(`/search?term=${term[0]}`);
  };

  return (
    <div
      className={`flex flex-col items-center justify-center h-screen ${
        darkMode && "bg-gray-900"
      }`}>
      <Head>
        <title>Google</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1.0' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      {/* Header */}
      <header
        className={`flex w-full p-4 justify-between text-sm ${
          darkMode ? "text-white" : "text-gray-700"
        }`}>
        {/* Left */}
        <div className='flex space-x-4 items-center ml-3'>
          <p className='link'>About</p>
          <p className='link'>Store</p>
        </div>
        {/* Right */}

        <div className='flex space-x-4 items-center '>
          <DarkModeSwitch
            darkMode={darkMode}
            setDarkModeAndCookie={setDarkModeAndCookie}
          />
          <p className='link'>Gmail</p>
          <p className='link'>Images</p>

          {/* Icon */}
          <ViewGridIcon
            className={`w-10 h-10 p-2 rounded-full cursor-pointer ${
              darkMode ? "hover:bg-black" : "hover:bg-gray-100"
            } `}
          />
          {/* Avatar */}
          <Avatar
            url={
              "https://images.unsplash.com/photo-1623265041640-8973a7afe898?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1051&q=80"
            }
          />
        </div>
      </header>
      {/* Body */}
      <form className='flex flex-col items-center mt-44 flex-grow w-4/5 '>
        <Image
          width={300}
          height={100}
          src='https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png'
        />
        <div
          className={`flex w-full mt-3 hover:shadow-lg focus-within:shadow-lg max-w-md rounded-full border ${
            darkMode ? "border-gray-600" : "border-gray-200"
          } px-5 py-3 items-center sm:max-w-xl lg:max-w-2xl`}>
          <SearchIcon
            onClick={search}
            className='h-5 mr-3 cursor-pointer text-gray-500'
          />
          <input
            ref={searchInputRef}
            type='text'
            className={`focus:outline-none flex-grow ${
              darkMode ? "bg-gray-900 text-white" : "bg-white text-black"
            }`}
          />
          {/* TODO: Add voice functionality */}
          <VoiceInput
            classAttr={`h-5 cursor-pointer ${
              darkMode ? "text-gray-500" : "text-black"
            }`}
          />
        </div>
        <div className='flex flex-col w-1/2 space-y-2 justify-center mt-8 sm:space-y-0 sm:flex-row sm:space-x-4'>
          <button
            onClick={search}
            className={`${darkMode ? "btn-dark" : "btn"}`}>
            Google Search
          </button>
          <button
            onClick={feelingLucky}
            className={`${darkMode ? "btn-dark" : "btn"}`}>
            I'm Feeling Lucky
          </button>
        </div>
      </form>

      {/* Footer */}
      <Footer DarkMode={darkMode} />
    </div>
  );
}

Home.getInitialProps = ({ req }) => {
  const cookies = parseCookies(req);
  if (cookies.DarkMode)
    return {
      initialDarkMode: JSON.parse(cookies.DarkMode),
    };
  return { initialDarkMode: false };
};
